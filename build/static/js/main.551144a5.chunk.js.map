{"version":3,"sources":["components/form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleTotalAmount","event","setState","totalAmount","target","value","handleDownPayment","downPayment","handleInterestRate","interestRate","handleamortizationPeriod","amortizationPeriod","handlePaymentPeriod","paymentPeriod","handleSubmit","principle","state","numberOfPayments","interestRasiedToPayments","Math","pow","topMortgageEquation","bottomMortgageEquation","alert","toFixed","preventDefault","this","onSubmit","onChange","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAwHeA,G,wDArHd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAWPC,kBAAoB,SAAAC,GACnB,EAAKC,SAAS,CACbC,YAAaF,EAAMG,OAAOC,SAdT,EAkBnBC,kBAAoB,SAAAL,GACnB,EAAKC,SAAS,CACbK,YAAaN,EAAMG,OAAOC,SApBT,EAwBnBG,mBAAqB,SAAAP,GACpB,EAAKC,SAAS,CACbO,aAAcR,EAAMG,OAAOC,SA1BV,EA8BnBK,yBAA2B,SAAAT,GAC1B,EAAKC,SAAS,CACbS,mBAAoBV,EAAMG,OAAOC,SAhChB,EAoCnBO,oBAAsB,SAAAX,GACrB,EAAKC,SAAS,CACbW,cAAeZ,EAAMG,OAAOC,SAtCX,EA4CnBS,aAAe,SAAAb,GAYd,IAAIc,EAAY,EAAKC,MAAMb,YAAc,EAAKa,MAAMT,YAChDE,EAAgB,EAAKO,MAAMP,aAAa,IAAK,EAAKO,MAAMH,cACxDI,EAAmB,EAAKD,MAAMH,cAAc,EAAKG,MAAML,mBACvDO,EAA2BC,KAAKC,IAAK,EAAEX,EAAcQ,GACrDI,EAAsBZ,EAAaS,EACnCI,EAAyBJ,EAAyB,EAGtDK,MAAM,gBAAD,OAAiB,EAAKP,MAAMb,YAA5B,yBAAwD,EAAKa,MAAMT,YAAnE,0BAAgG,EAAKS,MAAMP,aAA3G,iCAAgJ,EAAKO,MAAML,mBAA3J,4BAAiM,EAAKK,MAAMH,cAA5M,4CACoBE,GAAaM,EAAoBC,IAAyBE,QAAQ,KAC3FvB,EAAMwB,kBA/DN,EAAKT,MAAQ,CACZb,YAAa,IACbI,YAAa,IACbE,aAAc,IACdE,mBAAoB,GACpBE,cAAe,IARE,E,qDAsET,IAAD,EAC6Ea,KAAKV,MAAlFb,EADA,EACAA,YAAaI,EADb,EACaA,YAAaE,EAD1B,EAC0BA,aAAcE,EADxC,EACwCA,mBAAoBE,EAD5D,EAC4DA,cACpE,OACC,0BAAMc,SAAUD,KAAKZ,cACpB,6BACC,iDACA,2BACCT,MAAOF,EACPyB,SAAUF,KAAK1B,qBAGjB,6BACC,+CACA,2BACCK,MAAOE,EACPqB,SAAUF,KAAKpB,qBAGjB,6BACC,gDACA,2BACCD,MAAOI,EACPmB,SAAUF,KAAKlB,sBAGjB,6BACC,sDACA,2BACCH,MAAOM,EACPiB,SAAUF,KAAKhB,4BAIjB,6BACC,iDACA,4BAAQL,MAAOQ,EAAee,SAAUF,KAAKd,qBAC5C,4BAAQP,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,KAAd,YAGF,4BAAQwB,KAAK,UAAb,e,GAhHeC,cCcJC,E,uKATb,OACC,yBAAKC,UAAU,OACV,mDACJ,kBAAC,EAAD,W,GALcF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.551144a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\ttotalAmount: 200000,\r\n\t\t\tdownPayment: 20000,\r\n\t\t\tinterestRate: 4.5,\r\n\t\t\tamortizationPeriod: 30,\r\n\t\t\tpaymentPeriod: 12\r\n\t\t}\r\n\t}\r\n\r\n\thandleTotalAmount = event => {\r\n\t\tthis.setState({\r\n\t\t\ttotalAmount: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleDownPayment = event => {\r\n\t\tthis.setState({\r\n\t\t\tdownPayment: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleInterestRate = event => {\r\n\t\tthis.setState({\r\n\t\t\tinterestRate: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleamortizationPeriod = event => {\r\n\t\tthis.setState({\r\n\t\t\tamortizationPeriod: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandlePaymentPeriod = event => {\r\n\t\tthis.setState({\r\n\t\t\tpaymentPeriod: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\thandleSubmit = event => {\r\n\r\n\t\t/*Mortgage Math\r\n\t\t\tnumber of payments = amortization period * payment period\r\n\t\t\t1yr yearly = 1\r\n\t\t\t1yr monthly = 12\r\n\t\t    1yr  bi-weekly = 24\r\n\r\n                                     interest/paymentperiod(interest/paymentperiod+1)^number of payments\r\n\t\t(totalAmount - downpayment)* -----------------------\r\n\t\t\t\t\t\t\t\t\t\t((1+interest/paymentperiod)^number of payments) - 1 \r\n\t\t*/\r\n\t\tvar principle = this.state.totalAmount - this.state.downPayment;\r\n\t\tvar interestRate = (this.state.interestRate/100)/this.state.paymentPeriod;\r\n\t\tvar numberOfPayments = this.state.paymentPeriod*this.state.amortizationPeriod;\r\n\t\tvar interestRasiedToPayments = Math.pow((1+interestRate),numberOfPayments);\r\n\t\tvar topMortgageEquation = interestRate*interestRasiedToPayments;\r\n\t\tvar bottomMortgageEquation = interestRasiedToPayments-1;\r\n\r\n\r\n\t\talert(`Total Amount:${this.state.totalAmount}\\nDownPayment:${this.state.downPayment}\\nInterestRate:${this.state.interestRate}\\nAmortization Period:${this.state.amortizationPeriod}\\nPayment Period:${this.state.paymentPeriod} \\n\r\n\t\t\t   Mortgage Payment: ${(principle * (topMortgageEquation/bottomMortgageEquation)).toFixed(2)}`)\r\n\t\tevent.preventDefault()\r\n\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { totalAmount, downPayment, interestRate, amortizationPeriod, paymentPeriod} = this.state\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>Total Amount: </label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={totalAmount}\r\n\t\t\t\t\t\tonChange={this.handleTotalAmount}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>Down Payment</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={downPayment}\r\n\t\t\t\t\t\tonChange={this.handleDownPayment}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>Interest Rate</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={interestRate}\r\n\t\t\t\t\t\tonChange={this.handleInterestRate}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>Amortization Period</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={amortizationPeriod}\r\n\t\t\t\t\t\tonChange={this.handleamortizationPeriod}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>Payment Period</label>\r\n\t\t\t\t\t<select value={paymentPeriod} onChange={this.handlePaymentPeriod}>\r\n\t\t\t\t\t\t<option value=\"12\">Monthly</option>\r\n\t\t\t\t\t\t<option value=\"24\">Bi-Weekly</option>\r\n\t\t\t\t\t\t<option value=\"1\">Yearly</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Form","  \nimport React, { Component } from 'react'\nimport './App.css'\nimport Form from './components/form'\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n        <h1>Mortgage Calculator</h1>\n\t\t\t\t<Form />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}